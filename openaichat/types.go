package openaichat

const APIEndpoint = "https://api.openai.com/v1/chat/completions"

// https://platform.openai.com/docs/api-reference/chat/object
type ChatCompletionResponse struct {
	ID      string   `json:"id"`
	Object  string   `json:"object"`
	Created int64    `json:"created"`
	Model   string   `json:"model"`
	Choices []Choice `json:"choices"`
	Error   *Error   `json:"error,omitempty"`
}

type Error struct {
	Message string `json:"message"`
	// like "invalid_request_error"
	Type string `json:"type"`
	// like "messages"
	Param string `json:"param"`
	// like "context_length_exceeded"
	Code string `json:"code"`
}

type Choice struct {
	Index   int      `json:"index"`
	Delta   *Delta   `json:"delta"`
	Message *Message `json:"message,omitempty"`
	// "stop" if the API returned the full completion generated by the model.
	FinishReason string                 `json:"finish_reason"`
	Remainings   map[string]interface{} `json:"-"`
}

type Delta struct {
	Content      string        `json:"content"`
	FunctionCall *FunctionCall `json:"function_call,omitempty"`
}

// https://platform.openai.com/docs/api-reference/chat/create#chat/create-messages
type Message struct {
	// The role of the messages author. One of system, user, assistant, or function.
	Role string `json:"role"`
	// The contents of the message. content is required for all messages, and may be null for assistant messages with function calls.
	Content string `json:"content"`
	// The name of the author of this message. name is required if role is function, and it should be the name of the function whose response is in the content
	Name *string `json:"name,omitempty"`
	// The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *FunctionCall `json:"function_call,omitempty"`
}

type FunctionCall struct {
	Name      string  `json:"name"`
	Arguments *string `json:"arguments,omitempty"`
}

type FunctionParameters struct {
	Type       string                               `json:"type"`
	Properties map[string]FunctionParameterProperty `json:"properties"`
}

type FunctionParameterProperty struct {
	Type        string `json:"type"`
	Description string `json:"description"`
}

type Function struct {
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Parameters  FunctionParameters `json:"parameters"`
}

type ChatCompletionRequest struct {
	Model    string    `json:"model"`
	Stream   bool      `json:"stream"`
	Messages []Message `json:"messages"`
	// A list of functions the model may generate JSON inputs for.
	// "omitempty" is needed to avoid 400 Bad Request when
	// functions is an empty slice.
	Functions []Function `json:"functions,omitempty"`
	// Controls how the model responds to function calls
	FunctionCall *FunctionCall `json:"function_call,omitempty"`
}
